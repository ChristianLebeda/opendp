# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _opendp_ffi
else:
    import _opendp_ffi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class FfiError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    variant = property(_opendp_ffi.FfiError_variant_get, _opendp_ffi.FfiError_variant_set)
    message = property(_opendp_ffi.FfiError_message_get, _opendp_ffi.FfiError_message_set)
    backtrace = property(_opendp_ffi.FfiError_backtrace_get, _opendp_ffi.FfiError_backtrace_set)

    def __init__(self):
        _opendp_ffi.FfiError_swiginit(self, _opendp_ffi.new_FfiError())
    __swig_destroy__ = _opendp_ffi.delete_FfiError

# Register FfiError in _opendp_ffi:
_opendp_ffi.FfiError_swigregister(FfiError)

class FfiSlice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ptr = property(_opendp_ffi.FfiSlice_ptr_get, _opendp_ffi.FfiSlice_ptr_set)
    len = property(_opendp_ffi.FfiSlice_len_get, _opendp_ffi.FfiSlice_len_set)

    def __init__(self):
        _opendp_ffi.FfiSlice_swiginit(self, _opendp_ffi.new_FfiSlice())
    __swig_destroy__ = _opendp_ffi.delete_FfiSlice

# Register FfiSlice in _opendp_ffi:
_opendp_ffi.FfiSlice_swigregister(FfiSlice)


def opendp_core__make_chain_mt(measurement1, transformation0):
    return _opendp_ffi.opendp_core__make_chain_mt(measurement1, transformation0)

def opendp_core__make_chain_tt(transformation1, transformation0):
    return _opendp_ffi.opendp_core__make_chain_tt(transformation1, transformation0)

def opendp_core__make_composition(measurement0, measurement1):
    return _opendp_ffi.opendp_core__make_composition(measurement0, measurement1)

def opendp_core__error_free(this_):
    return _opendp_ffi.opendp_core__error_free(this_)

def opendp_core__measurement_check(this_, distance_in, distance_out):
    return _opendp_ffi.opendp_core__measurement_check(this_, distance_in, distance_out)

def opendp_core__measurement_invoke(this_, arg):
    return _opendp_ffi.opendp_core__measurement_invoke(this_, arg)

def opendp_core__measurement_free(this_):
    return _opendp_ffi.opendp_core__measurement_free(this_)

def opendp_core__transformation_invoke(this_, arg):
    return _opendp_ffi.opendp_core__transformation_invoke(this_, arg)

def opendp_core__transformation_free(this_):
    return _opendp_ffi.opendp_core__transformation_free(this_)

def opendp_core__bootstrap():
    return _opendp_ffi.opendp_core__bootstrap()

def opendp_data__slice_as_object(type_args, raw):
    return _opendp_ffi.opendp_data__slice_as_object(type_args, raw)

def opendp_data__object_type(this_):
    return _opendp_ffi.opendp_data__object_type(this_)

def opendp_data__object_as_slice(obj):
    return _opendp_ffi.opendp_data__object_as_slice(obj)

def opendp_data__object_free(this_):
    return _opendp_ffi.opendp_data__object_free(this_)

def opendp_data__slice_free(this_):
    return _opendp_ffi.opendp_data__slice_free(this_)

def opendp_data__str_free(this_):
    return _opendp_ffi.opendp_data__str_free(this_)

def opendp_data__bool_free(this_):
    return _opendp_ffi.opendp_data__bool_free(this_)

def opendp_data__to_string(this_):
    return _opendp_ffi.opendp_data__to_string(this_)

def opendp_data__bootstrap():
    return _opendp_ffi.opendp_data__bootstrap()

def make_base_gaussian(type_args, scale):
    return _opendp_ffi.make_base_gaussian(type_args, scale)

def make_base_gaussian_vec(type_args, scale):
    return _opendp_ffi.make_base_gaussian_vec(type_args, scale)

def make_base_simple_geometric(type_args, scale, min, max):
    return _opendp_ffi.make_base_simple_geometric(type_args, scale, min, max)

def make_base_laplace(type_args, scale):
    return _opendp_ffi.make_base_laplace(type_args, scale)

def make_base_laplace_vec(type_args, scale):
    return _opendp_ffi.make_base_laplace_vec(type_args, scale)

def make_base_stability(type_args, n, scale, threshold):
    return _opendp_ffi.make_base_stability(type_args, n, scale, threshold)

def make_split_lines(type_args):
    return _opendp_ffi.make_split_lines(type_args)

def make_parse_series(type_args, impute):
    return _opendp_ffi.make_parse_series(type_args, impute)

def make_split_records(type_args, separator):
    return _opendp_ffi.make_split_records(type_args, separator)

def make_create_dataframe(type_args, col_names):
    return _opendp_ffi.make_create_dataframe(type_args, col_names)

def make_split_dataframe(type_args, separator, col_names):
    return _opendp_ffi.make_split_dataframe(type_args, separator, col_names)

def make_parse_column(type_args, key, impute):
    return _opendp_ffi.make_parse_column(type_args, key, impute)

def make_select_column(type_args, key):
    return _opendp_ffi.make_select_column(type_args, key)

def make_identity(type_args):
    return _opendp_ffi.make_identity(type_args)

def make_clamp_vec(type_args, lower, upper):
    return _opendp_ffi.make_clamp_vec(type_args, lower, upper)

def make_clamp_scalar(type_args, lower, upper):
    return _opendp_ffi.make_clamp_scalar(type_args, lower, upper)

def make_cast_vec(type_args):
    return _opendp_ffi.make_cast_vec(type_args)

def make_bounded_sum(type_args, lower, upper):
    return _opendp_ffi.make_bounded_sum(type_args, lower, upper)

def make_bounded_sum_n(type_args, lower, upper, n):
    return _opendp_ffi.make_bounded_sum_n(type_args, lower, upper, n)

def make_count(type_args):
    return _opendp_ffi.make_count(type_args)

def make_count_by_categories(type_args, categories):
    return _opendp_ffi.make_count_by_categories(type_args, categories)

def make_count_by(type_args, n):
    return _opendp_ffi.make_count_by(type_args, n)

def make_bounded_mean(type_args, lower, upper, length):
    return _opendp_ffi.make_bounded_mean(type_args, lower, upper, length)

def make_bounded_variance(type_args, lower, upper, length, ddof):
    return _opendp_ffi.make_bounded_variance(type_args, lower, upper, length, ddof)

def make_bounded_covariance(type_args, lower, upper, length, ddof):
    return _opendp_ffi.make_bounded_covariance(type_args, lower, upper, length, ddof)


